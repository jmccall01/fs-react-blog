import {db} from "../db.js";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import env from "dotenv";

env.config()

export const register = (req, res) => {
    //Check emaill
    
    const q = 'SELECT * FROM users WHERE email = $1 OR username = $2';

    db.query(q, [req.body.email, req.body.username], (err, data) => {

        if (err) {
            console.log(err);
            return res.json("Error fetching data");
        }
        if (data.rows.length) {
            return res.status(409).json("User already exists");
        }

        //hash password and create user
        const salt = bcrypt.genSaltSync(10);
        const hash = bcrypt.hashSync(req.body.password, salt);

        const q = 'INSERT INTO users(username, email, password) VALUES($1, $2, $3)';
        const values = [req.body.username, req.body.email, hash];

        db.query(q, values, (err, data) => {
            if (err) {
                return res.send("Error fetching data");
            };
            return res.status(200).json("User created");
        });
    })
}

export const login = (req, res) => {
    const q = 'SELECT * FROM users WHERE username = $1';

    db.query(q, [req.body.username], (err, data)=>{
        if(err){
            return res.json("Error fetching data")
        }else if(data.rows.length == 0){
            return res.status(404).json("User does not exist") 
        }
        else if(!bcrypt.compareSync(req.body.password, data.rows[0].password)){
            return res.status(400).json("Wrong username or password");
        }
        //key generated by {node -e "console.log(require('crypto').randomBytes(32).toString('hex'))}"
        const token = jwt.sign({id: data.rows[0].id}, process.env.JWT_KEY);
        const {password, ...otherData} = data.rows[0];
        
        return res
            .cookie("access_token", token, { httpOnly: true, maxAge: 1000*60*60*24*7})
            .status(200)
            .json(otherData)
    }
)};

export const logout = (req, res) => {
    res.clearCookie('access_token').status(200).json("User logged out");
    
}